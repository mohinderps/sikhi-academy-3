name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_BACKEND_REPOSITORY: sikhi-academy-backend
  ECR_FRONTEND_REPOSITORY: sikhi-academy-frontend
  ECS_CLUSTER: sikhi-academy-cluster
  ECS_BACKEND_SERVICE: sikhi-academy-backend-service
  ECS_FRONTEND_SERVICE: sikhi-academy-frontend-service
  ECS_BACKEND_TASK_DEFINITION: .aws/backend-task-definition.json
  ECS_FRONTEND_TASK_DEFINITION: .aws/frontend-task-definition.json
  BACKEND_CONTAINER_NAME: sikhi-academy-backend
  FRONTEND_CONTAINER_NAME: sikhi-academy-frontend

permissions:
  contents: read

jobs:
  check-changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      frontend_changed: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  deploy-backend:
    name: Deploy Backend
    needs: check-changes
    if: needs.check-changes.outputs.backend_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_BACKEND_REPOSITORY }}:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/${{ env.ECR_BACKEND_REPOSITORY }}:$IMAGE_TAG
          echo "backend_image=$ECR_REGISTRY/${{ env.ECR_BACKEND_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_BACKEND_TASK_DEFINITION }}
          container-name: ${{ env.BACKEND_CONTAINER_NAME }}
          image: ${{ steps.build-backend-image.outputs.backend_image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_BACKEND_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-frontend:
    name: Deploy Frontend
    needs: [check-changes, deploy-backend]
    if: |
      always() &&
      (needs.check-changes.outputs.frontend_changed == 'true' || needs.check-changes.outputs.backend_changed == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped')
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        id: build-frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPOSITORY }}:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPOSITORY }}:$IMAGE_TAG
          echo "frontend_image=$ECR_REGISTRY/${{ env.ECR_FRONTEND_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_FRONTEND_TASK_DEFINITION }}
          container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
          image: ${{ steps.build-frontend-image.outputs.frontend_image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_FRONTEND_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
